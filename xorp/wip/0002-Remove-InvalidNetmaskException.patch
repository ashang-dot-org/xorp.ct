From 03704773455897b7f1b5967bd0ee0ade597c7501 Mon Sep 17 00:00:00 2001
From: Ben Greear <greearb@candelatech.com>
Date: Thu, 7 Sep 2017 16:37:08 -0700
Subject: [PATCH 02/33] Remove InvalidNetmaskException.

Latest g++ doesn't like exceptions.
---
 xorp/fea/mfea_node_cli.cc          | 19 ++++----------
 xorp/libxorp/exceptions.cc         | 23 -----------------
 xorp/libxorp/exceptions.hh         | 13 ----------
 xorp/libxorp/ipnet.hh              | 26 +++++++++++++------
 xorp/libxorp/ipv4.cc               |  7 ++---
 xorp/libxorp/ipv4.hh               | 14 +++++-----
 xorp/libxorp/ipv6.cc               |  4 +--
 xorp/libxorp/ipv6.hh               |  8 +++---
 xorp/libxorp/ipvx.cc               |  3 +--
 xorp/libxorp/ipvx.hh               |  7 +++--
 xorp/libxorp/ipvxnet.hh            |  9 +++----
 xorp/libxorp/tests/test_ipv4.cc    | 39 ----------------------------
 xorp/libxorp/tests/test_ipv4net.cc | 53 --------------------------------------
 xorp/libxorp/tests/test_ipv6.cc    | 39 ----------------------------
 xorp/libxorp/tests/test_ipv6net.cc | 53 --------------------------------------
 xorp/pim/pim_node_cli.cc           | 26 -------------------
 xorp/rtrmgr/template_tree_node.cc  | 18 -------------
 17 files changed, 46 insertions(+), 315 deletions(-)

diff --git a/xorp/fea/mfea_node_cli.cc b/xorp/fea/mfea_node_cli.cc
index b855c72..052c1bb 100644
--- a/xorp/fea/mfea_node_cli.cc
+++ b/xorp/fea/mfea_node_cli.cc
@@ -196,24 +196,15 @@ MfeaNodeCli::cli_show_mfea_dataflow(const vector<string>& argv)
     
     // Check the optional argument
     if (argv.size()) {
-	try {
-	    group_range = IPvXNet(argv[0].c_str());
-	} catch (InvalidString) {
-	    try {
-		group_range = IPvXNet(IPvX(argv[0].c_str()),
-				      IPvX::addr_bitlen(family()));
-	    } catch (InvalidString) {
+	group_range = IPvXNet(argv[0].c_str());
+	if (group_range.invalid()) {
+	    group_range = IPvXNet(IPvX(argv[0].c_str()),
+				  IPvX::addr_bitlen(family()));
+	    if (group_range.invalid()) {
 		cli_print(c_format("ERROR: Invalid group range address: %s\n",
 				   argv[0].c_str()));
 		return (XORP_ERROR);
-	    } catch (InvalidNetmaskLength) {
-		XLOG_UNREACHABLE();
-		return (XORP_ERROR);
 	    }
-	} catch (InvalidNetmaskLength) {
-	    cli_print(c_format("ERROR: Invalid group range netmask length: %s\n",
-			       argv[0].c_str()));
-	    return (XORP_ERROR);
 	}
 	if (! group_range.is_multicast()) {
 	    cli_print(c_format("ERROR: Group range is not multicast: %s\n",
diff --git a/xorp/libxorp/exceptions.cc b/xorp/libxorp/exceptions.cc
index afd73bd..9bf352f 100644
--- a/xorp/libxorp/exceptions.cc
+++ b/xorp/libxorp/exceptions.cc
@@ -115,29 +115,6 @@ InvalidPacket::InvalidPacket(const char* file,
 }
 
 
-InvalidNetmaskLength::InvalidNetmaskLength(const char* file,
-					   size_t line,
-					   int netmask_length)
-    : XorpException("XorpInvalidNetmaskLength", file, line),
-      _netmask_length (netmask_length)
-{
-    // There was a case where fea was crashing due to un-caught exception.
-    // Somehow, no useful info was being printed other than the exception
-    // name.  So, add some logging here just in case it happens again.
-    // (On reboot, couldn't cause the problem to happen again, so not sure
-    // I actually fixed the root cause in fea yet.)
-    cerr << "Creating InvalidNetmaskLength exception, file: "
-     << file << ":" << line << " netmask_length: " << netmask_length
-     << endl;
-}
-
-const string
-InvalidNetmaskLength::why() const
-{
-    return c_format("Invalid netmask length - %d", _netmask_length);
-}
-
-
 // ----------------------------------------------------------------------------
 // Handlers
 
diff --git a/xorp/libxorp/exceptions.hh b/xorp/libxorp/exceptions.hh
index 6702529..70e6add 100644
--- a/xorp/libxorp/exceptions.hh
+++ b/xorp/libxorp/exceptions.hh
@@ -184,19 +184,6 @@ public:
     InvalidPacket(const char* file, size_t line, const string& init_why = "");
 };
 
-/**
- * @short A standard XORP exception that is thrown if an IP netmask length is
- * invalid.
- */
-class InvalidNetmaskLength : public XorpException {
-public:
-    InvalidNetmaskLength(const char* file, size_t line, int netmask_length);
-    const string why() const;
-
-protected:
-    int _netmask_length;
-};
-
 
 // ----------------------------------------------------------------------------
 
diff --git a/xorp/libxorp/ipnet.hh b/xorp/libxorp/ipnet.hh
index f112663..9be62da 100644
--- a/xorp/libxorp/ipnet.hh
+++ b/xorp/libxorp/ipnet.hh
@@ -45,7 +45,7 @@ public:
      *
      * Default value has INADDR_ANY/0.
      */
-    IPNet() : _prefix_len(0) {}
+    IPNet() : _prefix_len(0), _invalid(0) {}
 
     /**
      * Constructor from a given base address and a prefix length.
@@ -54,12 +54,15 @@ public:
      * @param prefix_len length of subnet mask (e.g., class C nets would have
      * prefix_len=24).
      */
-    IPNet(const A& a, uint8_t prefix_len) throw (InvalidNetmaskLength)
+    IPNet(const A& a, uint8_t prefix_len)
 	: _masked_addr(a), _prefix_len(prefix_len)
     {
 	if (prefix_len > A::addr_bitlen())
-	    xorp_throw(InvalidNetmaskLength, prefix_len);
-	_masked_addr = a.mask_by_prefix_len(prefix_len);
+	    _invalid = true;
+	else {
+	    _masked_addr = a.mask_by_prefix_len(prefix_len);
+	    _invalid = 0;
+	}
     }
 
     /**
@@ -69,7 +72,7 @@ public:
      * and prefix length.
      */
     IPNet(const char *from_cstring)
-	throw (InvalidString, InvalidNetmaskLength)
+	throw (InvalidString)
     {
 	initialize_from_string(from_cstring);
     }
@@ -82,6 +85,7 @@ public:
     IPNet(const IPNet& n) {
 	_masked_addr	= n.masked_addr();
 	_prefix_len	= n.prefix_len();
+	_invalid = n._invalid;
     }
 
     /**
@@ -93,6 +97,7 @@ public:
     IPNet& operator=(const IPNet& n) {
 	_masked_addr	= n.masked_addr();
 	_prefix_len	= n.prefix_len();
+	_invalid = n._invalid;
 	return *this;
     }
 
@@ -105,7 +110,8 @@ public:
      */
     bool operator==(const IPNet& other) const {
 	return ((_prefix_len == other._prefix_len) &&
-		(_masked_addr == other._masked_addr));
+		(_masked_addr == other._masked_addr) &&
+		(_invalid == other._invalid));
     }
 
     /**
@@ -213,6 +219,9 @@ public:
      */
     string str() const;
 
+    /** Was it constructed properly? */
+    bool invalid() const { return _invalid; }
+
     /**
      * Test if the object contains a real (non-default) value.
      *
@@ -447,10 +456,11 @@ public:
 
 private:
     void initialize_from_string(const char *s)
-	throw (InvalidString, InvalidNetmaskLength);
+	throw (InvalidString);
 
     A		_masked_addr;
     uint8_t	_prefix_len;
+    uint8_t     _invalid;
 };
 
 /* ------------------------------------------------------------------------- */
@@ -585,7 +595,7 @@ IPNet<A>::contains(const IPNet<A>& other) const
 
 template <class A> void
 IPNet<A>::initialize_from_string(const char *cp)
-    throw (InvalidString, InvalidNetmaskLength)
+    throw (InvalidString)
 {
     char *slash = strrchr(const_cast<char*>(cp), '/');
     if (slash == 0)
diff --git a/xorp/libxorp/ipv4.cc b/xorp/libxorp/ipv4.cc
index 7de835e..c3ca765 100644
--- a/xorp/libxorp/ipv4.cc
+++ b/xorp/libxorp/ipv4.cc
@@ -215,10 +215,11 @@ IPv4::operator>>(uint32_t right_shift) const
 }
 
 IPv4
-IPv4::make_prefix(uint32_t mask_len) throw (InvalidNetmaskLength)
+IPv4::make_prefix(uint32_t mask_len)
 {
-    if (mask_len > 32)
-	xorp_throw(InvalidNetmaskLength, mask_len);
+    if (mask_len > 32) {
+	mask_len = 32;
+    }
     uint32_t m = (mask_len == 0) ? 0 : ((~0U) << (32 - mask_len));
     return IPv4(htonl(m));
 }
diff --git a/xorp/libxorp/ipv4.hh b/xorp/libxorp/ipv4.hh
index fdf252d..85241bf 100644
--- a/xorp/libxorp/ipv4.hh
+++ b/xorp/libxorp/ipv4.hh
@@ -609,9 +609,9 @@ public:
      * @param mask_len the length of the mask to create.
      * @return a new IPv4 address that contains a mask of length @ref mask_len.
      */
-    static IPv4 make_prefix(uint32_t mask_len) throw (InvalidNetmaskLength);
+    static IPv4 make_prefix(uint32_t mask_len);
 
-    static uint32_t make_prefix_uint(uint32_t mask_len) throw (InvalidNetmaskLength);
+    static uint32_t make_prefix_uint(uint32_t mask_len);
 
     /**
      * Make an IPv4 address prefix.
@@ -620,13 +620,11 @@ public:
      * @return a new IPv4 address created by masking this address with a mask
      * of length @ref prefix_len.
      */
-    IPv4 mask_by_prefix_len(uint32_t mask_len) const
-	throw (InvalidNetmaskLength) {
+    IPv4 mask_by_prefix_len(uint32_t mask_len) const {
 	return (*this) & make_prefix(mask_len);
     }
 
-    uint32_t mask_by_prefix_len_uint(uint32_t mask_len) const
-	throw (InvalidNetmaskLength) {
+    uint32_t mask_by_prefix_len_uint(uint32_t mask_len) const {
 	return this->_addr & make_prefix_uint(mask_len);
     }
 
@@ -754,10 +752,10 @@ IPv4::bits(uint32_t lsb, uint32_t len) const
 }
 
 inline uint32_t
-IPv4::make_prefix_uint(uint32_t mask_len) throw (InvalidNetmaskLength)
+IPv4::make_prefix_uint(uint32_t mask_len)
 {
     if (mask_len > 32)
-	xorp_throw(InvalidNetmaskLength, mask_len);
+	mask_len = 32;
     uint32_t m = (mask_len == 0) ? 0 : ((~0U) << (32 - mask_len));
     return htonl(m);
 }
diff --git a/xorp/libxorp/ipv6.cc b/xorp/libxorp/ipv6.cc
index 08ea290..2044d6d 100644
--- a/xorp/libxorp/ipv6.cc
+++ b/xorp/libxorp/ipv6.cc
@@ -337,13 +337,13 @@ init_prefixes(IPv6* v6prefix)
 }
 
 const IPv6&
-IPv6::make_prefix(uint32_t mask_len) throw (InvalidNetmaskLength)
+IPv6::make_prefix(uint32_t mask_len)
 {
     static IPv6 v6prefix[129];
     static uint32_t n_inited_prefixes = init_prefixes(&v6prefix[0]);
 
     if (mask_len > n_inited_prefixes)
-	xorp_throw(InvalidNetmaskLength, mask_len);
+	mask_len = n_inited_prefixes;
     return v6prefix[mask_len];
 }
 
diff --git a/xorp/libxorp/ipv6.hh b/xorp/libxorp/ipv6.hh
index 13eed63..2f4f539 100644
--- a/xorp/libxorp/ipv6.hh
+++ b/xorp/libxorp/ipv6.hh
@@ -499,7 +499,7 @@ public:
      * @param mask_len the length of the mask to create.
      * @return a new IPv6 address that contains a mask of length @ref mask_len.
      */
-    static const IPv6& make_prefix(uint32_t mask_len) throw (InvalidNetmaskLength);
+    static const IPv6& make_prefix(uint32_t mask_len);
 
     /**
      * Make an IPv6 address prefix.
@@ -508,13 +508,11 @@ public:
      * @return a new IPv6 address created by masking this address with a mask
      * of length @ref prefix_len.
      */
-    IPv6 mask_by_prefix_len(uint32_t prefix_len) const
-	throw (InvalidNetmaskLength) {
+    IPv6 mask_by_prefix_len(uint32_t prefix_len) const {
 	return (*this) & make_prefix(prefix_len);
     }
 
-    void mask_by_prefix_len_uint(uint32_t prefix_len, uint32_t* masked_addr) const
-	throw (InvalidNetmaskLength) {
+    void mask_by_prefix_len_uint(uint32_t prefix_len, uint32_t* masked_addr) const {
 	const IPv6& other = make_prefix(prefix_len);
 	masked_addr[0] = _addr[0] & other._addr[0];
 	masked_addr[1] = _addr[1] & other._addr[1];
diff --git a/xorp/libxorp/ipvx.cc b/xorp/libxorp/ipvx.cc
index 6a60ab5..88dabb9 100644
--- a/xorp/libxorp/ipvx.cc
+++ b/xorp/libxorp/ipvx.cc
@@ -251,7 +251,6 @@ IPvX::operator++() {
 
 IPvX
 IPvX::make_prefix(int family, uint32_t mask_len)
-    throw (InvalidNetmaskLength)
 {
     if (family == AF_INET)
 	return IPv4::make_prefix(mask_len);
@@ -263,7 +262,7 @@ IPvX::make_prefix(int family, uint32_t mask_len)
 }
 
 IPvX
-IPvX::mask_by_prefix_len(uint32_t prefix_len) const throw (InvalidNetmaskLength)
+IPvX::mask_by_prefix_len(uint32_t prefix_len) const
 {
     if (_af == AF_INET)
 	return get_ipv4().mask_by_prefix_len(prefix_len);
diff --git a/xorp/libxorp/ipvx.hh b/xorp/libxorp/ipvx.hh
index 4ae7872..d734e94 100644
--- a/xorp/libxorp/ipvx.hh
+++ b/xorp/libxorp/ipvx.hh
@@ -709,8 +709,7 @@ public:
      * @param mask_len the length of the mask to create.
      * @return a new IPvX address that contains a mask of length @ref mask_len.
      */
-    static IPvX make_prefix(int family, uint32_t mask_len)
-	throw (InvalidNetmaskLength);
+    static IPvX make_prefix(int family, uint32_t mask_len);
 
     /**
      * Make an IPvX mask prefix for the address family of this address.
@@ -718,7 +717,7 @@ public:
      * @param mask_len the length of the mask to create.
      * @return a new IPvX address that contains a mask of length @ref mask_len.
      */
-    IPvX make_prefix(uint32_t mask_len) const throw (InvalidNetmaskLength) {
+    IPvX make_prefix(uint32_t mask_len) const {
 	return IPvX::make_prefix(_af, mask_len);
     }
 
@@ -729,7 +728,7 @@ public:
      * @return a new IPvX address created by masking this address with a mask
      * of length @ref prefix_len.
      */
-    IPvX mask_by_prefix_len(uint32_t prefix_len) const throw (InvalidNetmaskLength);
+    IPvX mask_by_prefix_len(uint32_t prefix_len) const;
 
     /**
      * Get the mask length.
diff --git a/xorp/libxorp/ipvxnet.hh b/xorp/libxorp/ipvxnet.hh
index 44b5fe2..1d82a8e 100644
--- a/xorp/libxorp/ipvxnet.hh
+++ b/xorp/libxorp/ipvxnet.hh
@@ -42,18 +42,17 @@ typedef IPNet<IPvX> BaseIPvXNet;
 template<>
 inline
 IPNet<IPvX>::IPNet(const IPvX& ipvx, uint8_t prefix_len)
-    throw (InvalidNetmaskLength)
     : _prefix_len(prefix_len)
 {
     if (prefix_len > ipvx.addr_bitlen())
-	xorp_throw(InvalidNetmaskLength, prefix_len);
+	prefix_len = ipvx.addr_bitlen();
     _masked_addr = ipvx.mask_by_prefix_len(prefix_len);
 }
 
 template <>
 inline void
 IPNet<IPvX>::initialize_from_string(const char *cp)
-    throw (InvalidString, InvalidNetmaskLength)
+    throw (InvalidString)
 {
     char *slash = strrchr(const_cast<char*>(cp), '/');
     if (slash == 0) xorp_throw(InvalidString, "Missing slash");
@@ -124,7 +123,7 @@ public:
      * and prefix length.
      * Examples: "12.34.56/24", "1234:5678/32::"
      */
-    IPvXNet(const char *cp) throw (InvalidString, InvalidNetmaskLength)
+    IPvXNet(const char *cp) throw (InvalidString)
 	: BaseIPvXNet(cp) {}
 
     /**
@@ -133,7 +132,7 @@ public:
      * @param a base address for the subnet.
      * @param prefix_len length of subnet mask.
      */
-    IPvXNet(const IPvX& a, uint8_t prefix_len) throw (InvalidNetmaskLength)
+    IPvXNet(const IPvX& a, uint8_t prefix_len)
 	: BaseIPvXNet(a, prefix_len) {}
 
     // The following methods are specific to IPvXNet
diff --git a/xorp/libxorp/tests/test_ipv4.cc b/xorp/libxorp/tests/test_ipv4.cc
index 2c7735b..a4efeec 100644
--- a/xorp/libxorp/tests/test_ipv4.cc
+++ b/xorp/libxorp/tests/test_ipv4.cc
@@ -793,45 +793,6 @@ test_ipv4_manipulate_address()
 		   "leading_zero_count()");
 }
 
-/**
- * Test IPv4 invalid address manipulation.
- */
-void
-test_ipv4_invalid_manipulate_address()
-{
-    const char *addr_string4 = "12.34.56.78";
-
-    //
-    // Test making an invalid IPv4 mask prefix.
-    //
-    try {
-	// Invalid prefix length
-	IPv4 ip(IPv4::make_prefix(IPv4::addr_bitlen() + 1));
-	verbose_log("Cannot catch invalid IPv4 mask prefix with length %u : FAIL\n",
-		    XORP_UINT_CAST(IPv4::addr_bitlen() + 1));
-	incr_failures();
-	UNUSED(ip);
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-
-    //
-    // Test masking with an invalid IPv4 mask prefix.
-    //
-    try {
-	// Invalid mask prefix
-	IPv4 ip(addr_string4);
-	ip.mask_by_prefix_len(IPv4::addr_bitlen() + 1);
-	verbose_log("Cannot catch masking with an invalid IPv4 mask prefix with length %u : FAIL\n",
-		    XORP_UINT_CAST(IPv4::addr_bitlen() + 1));
-	incr_failures();
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-}
-
 int
 main(int argc, char * const argv[])
 {
diff --git a/xorp/libxorp/tests/test_ipv4net.cc b/xorp/libxorp/tests/test_ipv4net.cc
index 6a3eb93..b13b185 100644
--- a/xorp/libxorp/tests/test_ipv4net.cc
+++ b/xorp/libxorp/tests/test_ipv4net.cc
@@ -147,59 +147,6 @@ test_ipv4net_valid_constructors(TestInfo& test_info)
 }
 
 /**
- * Test IPv4Net invalid constructors.
- */
-bool
-test_ipv4net_invalid_constructors(TestInfo& test_info)
-{
-    UNUSED(test_info);
-
-    //
-    // Constructor for invalid prefix length.
-    //
-    try {
-	IPv4 ip("12.34.56.78");
-	IPv4Net ipnet(ip, ip.addr_bitlen() + 1);
-	verbose_log("Cannot catch invalid prefix length : FAIL\n");
-	incr_failures();
-	UNUSED(ipnet);
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-    
-    //
-    // Constructor from an invalid address string.
-    //
-    try {
-	// Invalid address string: note the typo -- lack of prefix length
-	IPv4Net ipnet("12.34.56.78/");
-	verbose_log("Cannot catch invalid IP network address \"12.34.56.78/\" : FAIL\n");
-	incr_failures();
-	UNUSED(ipnet);
-    } catch (const InvalidString& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-    
-    //
-    // Constructor from an address string with invalid prefix length.
-    //
-    try {
-	// Invalid address string: prefix length too long
-	IPv4Net ipnet("12.34.56.78/33");
-	verbose_log("Cannot catch invalid IP network address \"12.34.56.78/33\" : FAIL\n");
-	incr_failures();
-	UNUSED(ipnet);
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-
-    return (! failures());
-}
-
-/**
  * Test IPv4Net operators.
  */
 bool
diff --git a/xorp/libxorp/tests/test_ipv6.cc b/xorp/libxorp/tests/test_ipv6.cc
index 592c987..a5fa067 100644
--- a/xorp/libxorp/tests/test_ipv6.cc
+++ b/xorp/libxorp/tests/test_ipv6.cc
@@ -636,45 +636,6 @@ test_ipv6_manipulate_address()
 		   "leading_zero_count()");
 }
 
-/**
- * Test IPv6 invalid address manipulation.
- */
-void
-test_ipv6_invalid_manipulate_address()
-{
-    const char *addr_string6 = "1234:5678:9abc:def0:fed:cba9:8765:4321";
-
-    //
-    // Test making an invalid IPv6 mask prefix.
-    //
-    try {
-	// Invalid prefix length
-	IPv6 ip(IPv6::make_prefix(IPv6::addr_bitlen() + 1));
-	verbose_log("Cannot catch invalid IPv6 mask prefix with length %u : FAIL\n",
-		    XORP_UINT_CAST(IPv6::addr_bitlen() + 1));
-	incr_failures();
-	UNUSED(ip);
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-
-    //
-    // Test masking with an invalid IPv6 mask prefix.
-    //
-    try {
-	// Invalid mask prefix
-	IPv6 ip(addr_string6);
-	ip.mask_by_prefix_len(IPv6::addr_bitlen() + 1);
-	verbose_log("Cannot catch masking with an invalid IPv6 mask prefix with length %u : FAIL\n",
-		    XORP_UINT_CAST(IPv6::addr_bitlen() + 1));
-	incr_failures();
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-}
-
 int
 main(int argc, char * const argv[])
 {
diff --git a/xorp/libxorp/tests/test_ipv6net.cc b/xorp/libxorp/tests/test_ipv6net.cc
index 3622831..524d74c 100644
--- a/xorp/libxorp/tests/test_ipv6net.cc
+++ b/xorp/libxorp/tests/test_ipv6net.cc
@@ -154,59 +154,6 @@ test_ipv6net_valid_constructors(TestInfo& test_info)
 }
 
 /**
- * Test IPv6Net invalid constructors.
- */
-bool
-test_ipv6net_invalid_constructors(TestInfo& test_info)
-{
-    UNUSED(test_info);
-
-    //
-    // Constructor for invalid prefix length.
-    //
-    try {
-	IPv6 ip("1234:5678:9abc:def0:fed:cba9:8765:4321");
-	IPv6Net ipnet(ip, ip.addr_bitlen() + 1);
-	verbose_log("Cannot catch invalid prefix length : FAIL\n");
-	incr_failures();
-	UNUSED(ipnet);
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-    
-    //
-    // Constructor from an invalid address string.
-    //
-    try {
-	// Invalid address string: note the typo -- lack of prefix length
-	IPv6Net ipnet("1234:5678::/");
-	verbose_log("Cannot catch invalid IP network address \"1234:5678::/\" : FAIL\n");
-	incr_failures();
-	UNUSED(ipnet);
-    } catch (const InvalidString& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-
-    //
-    // Constructor from an address string with invalid prefix length.
-    //
-    try {
-	// Invalid address string: prefix length too long
-	IPv6Net ipnet("1234:5678::/129");
-	verbose_log("Cannot catch invalid IP network address \"1234:5678::/129\" : FAIL\n");
-	incr_failures();
-	UNUSED(ipnet);
-    } catch (const InvalidNetmaskLength& e) {
-	// The problem was caught
-	verbose_log("%s : OK\n", e.str().c_str());
-    }
-
-    return (! failures());
-}
-
-/**
  * Test IPv6Net operators.
  */
 bool
diff --git a/xorp/pim/pim_node_cli.cc b/xorp/pim/pim_node_cli.cc
index ab13e2f..da6aa38 100644
--- a/xorp/pim/pim_node_cli.cc
+++ b/xorp/pim/pim_node_cli.cc
@@ -283,10 +283,6 @@ PimNodeCli::cli_show_pim_bootstrap(const vector<string>& argv)
 	    cli_print(c_format("ERROR: Invalid zone ID address: %s\n",
 			       argv[0].c_str()));
 	    return (XORP_ERROR);
-	} catch (InvalidNetmaskLength) {
-	    cli_print(c_format("ERROR: Invalid zone ID netmask length: %s\n",
-			       argv[0].c_str()));
-	    return (XORP_ERROR);
 	}
     }
     
@@ -502,10 +498,6 @@ PimNodeCli::cli_show_pim_bootstrap_rps(const vector<string>& argv)
 	    cli_print(c_format("ERROR: Invalid zone ID address: %s\n",
 			       argv[0].c_str()));
 	    return (XORP_ERROR);
-	} catch (InvalidNetmaskLength) {
-	    cli_print(c_format("ERROR: Invalid zone ID netmask length: %s\n",
-			       argv[0].c_str()));
-	    return (XORP_ERROR);
 	}
     }
     
@@ -793,10 +785,6 @@ PimNodeCli::cli_show_pim_join(const vector<string>& argv)
 		cli_print(c_format("ERROR: Invalid group range address: %s\n",
 				   argv[0].c_str()));
 		return (XORP_ERROR);
-	    } catch (InvalidNetmaskLength) {
-		cli_print(c_format("ERROR: Invalid group range netmask length: %s\n",
-				   argv[0].c_str()));
-		return (XORP_ERROR);
 	    }
 	}
 	if (! group_range.is_multicast()) {
@@ -834,14 +822,7 @@ PimNodeCli::cli_show_pim_join_all(const vector<string>& argv)
 		cli_print(c_format("ERROR: Invalid group range address: %s\n",
 				   argv[0].c_str()));
 		return (XORP_ERROR);
-	    } catch (InvalidNetmaskLength) {
-		XLOG_UNREACHABLE();
-		return (XORP_ERROR);
 	    }
-	} catch (InvalidNetmaskLength) {
-	    cli_print(c_format("ERROR: Invalid group range netmask length: %s\n",
-			       argv[0].c_str()));
-	    return (XORP_ERROR);
 	}
 	if (! group_range.is_multicast()) {
 	    cli_print(c_format("ERROR: Group range is not multicast: %s\n",
@@ -878,14 +859,7 @@ PimNodeCli::cli_show_pim_mfc(const vector<string>& argv)
 		cli_print(c_format("ERROR: Invalid group range address: %s\n",
 				   argv[0].c_str()));
 		return (XORP_ERROR);
-	    } catch (InvalidNetmaskLength) {
-		XLOG_UNREACHABLE();
-		return (XORP_ERROR);
 	    }
-	} catch (InvalidNetmaskLength) {
-	    cli_print(c_format("ERROR: Invalid group range netmask length: %s\n",
-			       argv[0].c_str()));
-	    return (XORP_ERROR);
 	}
 	if (! group_range.is_multicast()) {
 	    cli_print(c_format("ERROR: Group range is not multicast: %s\n",
diff --git a/xorp/rtrmgr/template_tree_node.cc b/xorp/rtrmgr/template_tree_node.cc
index bd99d2d..285cbe0 100644
--- a/xorp/rtrmgr/template_tree_node.cc
+++ b/xorp/rtrmgr/template_tree_node.cc
@@ -2016,10 +2016,6 @@ IPv4NetTemplate::IPv4NetTemplate(TemplateTree& template_tree,
 	error_msg = c_format("Bad IPv4Net type value \"%s\".",
 			     initializer.c_str());
 	xorp_throw(ParseError, error_msg);
-    } catch (InvalidNetmaskLength) {
-	error_msg = c_format("Illegal IPv4 prefix length in subnet \"%s\".",
-			     initializer.c_str());
-	xorp_throw(ParseError, error_msg);
     }
     set_has_default();
 }
@@ -2061,11 +2057,6 @@ IPv4NetTemplate::type_match(const string& s, string& error_msg) const
     } catch (InvalidString) {
 	error_msg = "value must be an IPv4 subnet in address/prefix-length form";
 	return false;
-    } catch (InvalidNetmaskLength) {
-	error_msg = c_format("prefix length must be an integer between "
-			     "0 and %u",
-			     IPv4::addr_bitlen());
-	return false;
     }
     return true;
 }
@@ -2217,10 +2208,6 @@ IPv6NetTemplate::IPv6NetTemplate(TemplateTree& template_tree,
 	error_msg = c_format("Bad IPv6Net type value \"%s\".",
 			     initializer.c_str());
 	xorp_throw(ParseError, error_msg);
-    } catch (InvalidNetmaskLength) {
-	error_msg = c_format("Illegal IPv6 prefix length in subnet \"%s\".",
-			     initializer.c_str());
-	xorp_throw(ParseError, error_msg);
     }
     set_has_default();
 }
@@ -2264,11 +2251,6 @@ IPv6NetTemplate::type_match(const string& s, string& error_msg) const
 	error_msg = "value must be an IPv6 subnet in address/prefix-length "
 	    "form";
 	return false;
-    } catch (InvalidNetmaskLength) {
-	error_msg = c_format("prefix length must be an integer between "
-			     "0 and %u",
-			     IPv6::addr_bitlen());
-	return false;
     }
     return true;
 }
-- 
2.7.5

